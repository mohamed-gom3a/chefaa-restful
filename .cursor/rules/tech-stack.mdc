---
description: Tech stack, dependency versions, and best practices for Chefaa Flutter monorepo
globs: **/*
alwaysApply: true
---

# Chefaa Tech Stack & Dependencies Guide

## Project Overview

**Chefaa** is a Flutter-based e-commerce/pharmacy application with a monorepo structure using Melos for package management. The project includes a Dart Frog backend API and follows a feature-driven architecture.

## Core Technology Stack

### Frontend Framework
- **Flutter**: ^3.22.0 (SDK: ^3.7.2)
- **Dart**: ^3.7.2
- **Platforms**: Android, iOS, Web, macOS, Linux, Windows

### Backend Framework
- **Dart Frog**: ^1.1.0 - Modern Dart backend framework
- **Supabase**: ^2.7.0 - Backend-as-a-Service for database and auth
- **Stormberry**: ^0.16.0 - Strongly-typed PostgreSQL ORM

### Monorepo Management
- **Melos**: ^6.3.2 - Monorepo tool for Dart/Flutter
- **Mason**: Brick templates for code generation

## Major Dependencies Analysis

### State Management
```yaml
bloc: ^9.0.0                    # Core BLoC library
flutter_bloc: ^9.1.0            # Flutter BLoC integration
bloc_concurrency: ^0.3.0        # BLoC concurrency utilities
```

**Best Practices:**
- Use BLoC pattern for complex state management
- Implement `bloc_concurrency` for handling concurrent events
- Follow the established pattern in `lib/CORE/app/bloc/`

### Networking & API
```yaml
dio: ^5.8.0+1                   # HTTP client (Frontend)
dio: ^5.7.0                     # HTTP client (Backend)
retrofit: ^4.4.2                # Type-safe HTTP client
pretty_dio_logger: ^1.4.0       # API request logging
```

**Best Practices:**
- Use Dio for all HTTP requests with proper interceptors
- Implement Retrofit for type-safe API calls
- Enable `pretty_dio_logger` in development only
- Follow patterns in `lib/CORE/networking/`

### Authentication
```yaml
firebase_core: ^3.13.0          # Firebase core
firebase_auth: ^5.0.0           # Firebase authentication
google_sign_in: ^6.2.1          # Google OAuth
flutter_secure_storage: ^9.2.4  # Secure token storage
```

**Best Practices:**
- Use Firebase Auth for authentication
- Store tokens securely with `flutter_secure_storage`
- Implement proper token refresh mechanisms
- Follow patterns in `packages/authentication_client/`

### Local Storage & Caching
```yaml
hive_ce: ^2.11.3                # NoSQL database
hive_ce_flutter: ^2.3.1         # Flutter integration
shared_preferences: ^2.5.3      # Simple key-value storage
cached_network_image: ^3.4.1    # Image caching
```

**Best Practices:**
- Use Hive for complex local data storage
- Use `shared_preferences` for simple settings
- Implement proper cache invalidation strategies
- Follow patterns in `lib/CORE/caching/`

### Navigation
```yaml
go_router: ^14.8.1              # Declarative routing
```

**Best Practices:**
- Use GoRouter for all navigation
- Define routes centrally in `lib/CORE/router/`
- Implement proper route guards for authentication

### UI & Design
```yaml
flutter_screenutil: ^5.9.3      # Responsive design
flutter_svg: ^2.1.0             # SVG support
shimmer: ^3.0.0                 # Loading animations
animations: ^2.0.11             # Material animations
carousel_slider: ^5.0.0         # Carousel components
```

**Best Practices:**
- Use `flutter_screenutil` for responsive layouts
- Implement shimmer loading states
- Follow design system in `packages/app_ui/`

### Code Generation
```yaml
injectable: ^2.5.0              # Dependency injection
json_annotation: ^4.9.0         # JSON serialization
json_serializable: ^6.9.0       # JSON code generation
hive_ce_generator: ^1.9.2       # Hive code generation
injectable_generator: ^2.6.2    # Injectable code generation
build_runner: ^2.4.13           # Code generation runner
```

**Best Practices:**
- Use Injectable for dependency injection
- Generate JSON serialization code
- Run `build_runner` after dependency changes
- Follow patterns in `lib/CORE/di/`

### Development Tools
```yaml
very_good_analysis: ^7.0.0      # Static analysis
flutter_lints: ^5.0.0           # Flutter linting
talker: ^4.8.0                  # Logging
talker_bloc_logger: ^4.8.0      # BLoC logging
```

**Best Practices:**
- Use Very Good Analysis for consistent code quality
- Implement proper logging with Talker
- Enable BLoC logging in development

### Maps & Location
```yaml
google_maps_flutter: ^2.12.1    # Google Maps integration
geocode: ^1.0.3                 # Geocoding
location_repository: path       # Custom location package
```

**Best Practices:**
- Use Google Maps for location features
- Implement proper location permissions
- Follow patterns in `lib/FEATURES/map/`

### Image & Media
```yaml
image_picker: ^1.1.2            # Image selection
flutter_image_compress: ^2.1.0  # Image compression
video_compress: ^3.1.3          # Video compression
```

**Best Practices:**
- Compress images before upload
- Handle permissions properly
- Follow patterns in `lib/CORE/services/`

## Package Architecture

### Monorepo Packages
```
packages/
├── app_ui/                     # Shared UI components
├── authentication_client/      # Auth abstraction
├── env/                        # Environment config
├── location_repository/        # Location services
├── shared/                     # Shared utilities
├── storage/                    # Storage abstractions
├── user_repository/            # User data management
└── utilities/                  # Utility packages
```

**Best Practices:**
- Keep packages focused and single-purpose
- Use path dependencies for local packages
- Maintain consistent versioning across packages
- Follow Melos workspace conventions

## Version Management Strategy

### Core Dependencies
- **Flutter**: Use latest stable version (^3.22.0)
- **Dart**: Match Flutter SDK requirements (^3.7.2)
- **BLoC**: Use latest major version (^9.0.0)

### Security Considerations
- **Firebase**: Keep updated for security patches
- **Dio**: Use latest version for security fixes
- **Secure Storage**: Always use latest version

### Performance Dependencies
- **Hive**: Use CE version for better performance
- **Cached Network Image**: Implement proper cache strategies
- **Image Compression**: Always compress before upload

## Development Workflow

### Code Generation Commands
```bash
# Generate all code
flutter packages pub run build_runner build --delete-conflicting-outputs

# Watch for changes
flutter packages pub run build_runner watch

# Generate Hive adapters
flutter packages pub run build_runner build --delete-conflicting-outputs
```

### Monorepo Commands
```bash
# Install all dependencies
melos bootstrap

# Clean and reinstall
melos cleanAndBootstrap

# Run tests across packages
melos run test

# Add dependencies to all packages
melos run add_all_injectable
```

### Environment Management
- **Development**: `main_development.dart`
- **Staging**: `main_staging.dart`
- **Production**: `main_production.dart`

## Best Practices Summary

### 1. Dependency Management
- Use exact versions for critical dependencies
- Keep security-sensitive packages updated
- Use path dependencies for local packages
- Follow Melos workspace conventions

### 2. Code Organization
- Follow feature-driven architecture
- Use BLoC pattern for state management
- Implement proper dependency injection
- Generate code for boilerplate reduction

### 3. Performance
- Implement proper caching strategies
- Compress images and media
- Use lazy loading where appropriate
- Monitor bundle size

### 4. Security
- Store sensitive data securely
- Implement proper authentication flows
- Use HTTPS for all API calls
- Validate user inputs

### 5. Testing
- Write tests for all packages
- Use mocktail for mocking
- Implement widget tests
- Follow testing patterns in existing code

## Migration Guidelines

### When Updating Dependencies
1. Check breaking changes in changelogs
2. Update one major dependency at a time
3. Run full test suite after updates
4. Update related packages together
5. Document any breaking changes

### Version Compatibility
- Flutter 3.22.0+ requires Dart 3.7.2+
- BLoC 9.0.0+ requires Flutter 3.22.0+
- Firebase packages should be updated together
- Hive CE is the recommended version

## References

- [Flutter Documentation](https://docs.flutter.dev/)
- [Dart Frog Documentation](https://dartfrog.vgv.dev/)
- [BLoC Documentation](https://bloclibrary.dev/)
- [Melos Documentation](https://melos.invertase.dev/)
- [Supabase Documentation](https://supabase.com/docs)
