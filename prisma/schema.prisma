generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated"
  flatResourceStructure           = "false"
  updateDtoPrefix                 = "Update"
  outputType                      = "class"
  outputToNestJsResourceStructure = "true"
  createDtoPrefix                 = "Create"
  classValidation                 = "true"
  requiredResponseApiProperty     = "true"
  dtoSuffix                       = "Dto"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id             Int          @id @default(autoincrement())
  intervalType   IntervalType
  nextRefillDate DateTime
  lastRefillDate DateTime?
  endDate        DateTime?
  isActive       Boolean?
  createdAt      DateTime     @default(now())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive, createdAt])
  @@index([nextRefillDate])
}

model Offer {
  id           Int        @id @default(autoincrement())
  amount       Decimal    @db.Decimal(10, 2)
  amountType   AmountType
  position     Int
  active       Boolean    @default(true)
  validFrom    DateTime
  validUntil   DateTime?
  medicationId Int
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([medicationId])
  @@index([active, validFrom, validUntil])
  @@index([position])
}

model Notification {
  /// Unique identifier of notification
  id               String            @id @default(uuid())
  message          String
  isImportant      Boolean
  notificationType NotificationType?
  createdAt        DateTime          @default(now())
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isImportant, createdAt])
  @@index([notificationType, createdAt])
}

model Address {
  id          Int         @id @default(autoincrement())
  city        String
  streetName  String
  buildingNo  String?
  floor       String?
  apartment   String?
  landmark    String?
  lat         Float?
  lng         Float?
  addressType AddressType @default(HOME)
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([addressType, isDefault])
  @@index([city])
  @@index([lat, lng])
}

model CreditCard {
  id          Int      @id @default(autoincrement())
  last4       String   @db.VarChar(4)
  expiryMonth Int
  expiryYear  Int
  token       String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiryYear, expiryMonth])
}

model Coupon {
  id               String     @id @default(uuid())
  code             String     @unique
  description      String
  amount           Decimal    @db.Decimal(10, 2)
  minOrderValue    Decimal    @db.Decimal(10, 2)
  maxDiscountValue Decimal?   @db.Decimal(10, 2)
  amountType       AmountType @default(FIXED)
  usageLimit       Int?
  usedCount        Int        @default(0)
  isActive         Boolean    @default(true)
  validFrom        DateTime
  validUntil       DateTime
  createdBy        String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  orders           Order[]

  @@index([isActive, validFrom, validUntil])
  @@index([amountType, isActive])
  @@index([createdBy, createdAt])
}

model Payment {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(10, 2)
  method        String
  transactionId String
  paidAt        DateTime
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([method, paidAt])
  @@index([transactionId])
}

model Order {
  id                String            @id @default(uuid())
  orderStatus       OrderStatus       @default(PENDING)
  subtotalPrice     Decimal           @default(0) @db.Decimal(10, 2)
  totalPrice        Decimal           @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(10, 2)
  orderNote         String?
  contactPreference ContactPreference @default(PHONE)
  conflictSolution  ConflictSolution  @default(REPLACE)
  paymentMethod     PaymentMethod     @default(CASH_ON_DELIVERY)
  paymentName       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  couponId          String?
  userId            String
  delivery          Delivery?
  coupon            Coupon?           @relation(fields: [couponId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  payment           Payment?
  pickup            Pickup?

  @@index([userId, orderStatus])
  @@index([createdAt, orderStatus])
  @@index([couponId])
  @@index([paymentMethod, orderStatus])
  @@index([contactPreference])
}

model OrderItem {
  id             String     @id @default(uuid())
  price          Decimal    @db.Decimal(10, 2)
  quantity       Int
  discountAmount Decimal    @default(0) @db.Decimal(10, 2)
  orderId        String
  medicationId   Int
  medication     Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  order          Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([medicationId])
  @@index([orderId, medicationId])
}

model Delivery {
  id               String          @id @default(uuid())
  deliveryStatus   DeliveryStatus?
  trackingNumber   String?
  deliveryAddress  String?
  deliveryLat      Float?
  deliveryLng      Float?
  outAt            DateTime?
  estimatedAt      DateTime?
  completedAt      DateTime?
  deliveryOptionId Int?
  orderId          String          @unique
  deliveryOption   DeliveryOption? @relation(fields: [deliveryOptionId], references: [id])
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([deliveryStatus, estimatedAt])
  @@index([deliveryOptionId])
  @@index([trackingNumber])
  @@index([completedAt])
  @@index([deliveryLat, deliveryLng])
}

model Pickup {
  id              String       @id @default(uuid())
  pickupStatus    PickupStatus @default(PENDING)
  pharmacyAddress String?
  pharmacyLat     Float?
  pharmacyLng     Float?
  orderId         String       @unique
  order           Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([pickupStatus])
  @@index([pharmacyLat, pharmacyLng])
}

model DeliveryOption {
  id                 Int        @id @default(autoincrement())
  optionName         String
  optionType         String
  deliveryTimeHours  Int
  deliveryFee        Decimal    @db.Decimal(10, 2)
  discountPercentage Decimal?   @db.Decimal(5, 2)
  minimumOrderAmount Decimal?   @db.Decimal(10, 2)
  isActive           Boolean    @default(true)
  isAvailable        Boolean    @default(true)
  isFreeDelivery     Boolean?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Delivery           Delivery[]

  @@index([isActive, isAvailable])
  @@index([optionType, isActive])
  @@index([deliveryTimeHours])
}

model Cart {
  id         String     @id @default(uuid())
  totalPrice Decimal    @default(0) @db.Decimal(10, 2)
  cartStatus CartStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      CartItem[]

  @@index([userId, cartStatus])
  @@index([createdAt])
}

model CartItem {
  id           String     @id @default(uuid())
  price        Decimal    @db.Decimal(10, 2)
  quantity     Int
  medicationId Int
  cartId       String
  cart         Cart       @relation(fields: [cartId], references: [id])
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([medicationId])
  @@index([cartId, medicationId])
}

model Medication {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  stock         Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sellingCount  Int            @default(0)
  image         String?
  categoryId    Int?
  bundleId      Int?
  urlName       String?        @unique
  cartItems     CartItem[]
  bundle        Bundle?        @relation(fields: [bundleId], references: [id])
  category      Category?      @relation(fields: [categoryId], references: [id])
  Offer         Offer[]
  orderItems    OrderItem[]
  prescriptions Prescription[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([bundleId])
  @@index([stock])
  @@index([price, stock])
  @@index([sellingCount, createdAt])
  @@index([categoryId, stock])
}

model Bundle {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  medications Medication[]
}

model Category {
  name            String        @unique
  image           String?
  superCategoryId Int
  id              Int           @id @default(autoincrement())
  superCategory   SuperCategory @relation(fields: [superCategoryId], references: [id], onDelete: Cascade)
  medications     Medication[]

  @@index([superCategoryId])
}

model SuperCategory {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  image      String?
  categories Category[]
}

model WishlistItem {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  userId       String
  medicationId Int
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, medicationId])
  @@index([userId])
  @@index([medicationId])
  @@index([createdAt])
}

model Prescription {
  id           String     @id @default(uuid())
  description  String?
  createdAt    DateTime   @default(now())
  validUntil   DateTime   @default(dbgenerated("(now() + '12:00:00'::interval)"))
  medicationId Int
  images       Image[]
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([medicationId])
  @@index([createdAt, validUntil])
}

model Image {
  id             String        @id @default(uuid())
  url            String
  createdAt      DateTime      @default(now())
  prescriptionId String?
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])

  @@index([prescriptionId])
  @@index([createdAt])
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  address       String?
  role          Role           @default(USER)
  country       Country?       @default(EG)
  gender        Gender?
  phone         Int?
  Address       Address[]
  carts         Cart[]
  creditCards   CreditCard[]
  Notification  Notification[]
  orders        Order[]
  Purchase      Purchase[]
  Subscription  Subscription[]
  UserTokens    UserTokens[]
  wishlistItems WishlistItem[]

  @@index([email])
  @@index([role, country])
  @@index([gender])
  @@index([createdAt])
}

model UserTokens {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  family       String   @unique
  browserInfo  String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([family])
  @@index([userId, expiresAt])
}

model OldCategory {
  id      String    @id
  name    String    @unique
  Product Product[]
}

model Product {
  id                 String        @id
  name               String        @unique
  picture            String?
  basePrice          Decimal       @db.Decimal(10, 2)
  discountPercentage Int           @default(0)
  stock              Int           @default(0)
  description        String?
  createdAt          DateTime      @default(now())
  urlName            String        @unique
  Purchase           Purchase[]
  OldCategory        OldCategory[]

  @@index([basePrice, stock])
  @@index([createdAt])
  @@index([discountPercentage, stock])
}

model Purchase {
  id            String   @id
  userId        String?
  productId     String
  amount        Int      @default(1)
  totalPrice    Decimal  @db.Decimal(10, 2)
  reviewNote    Int?
  reviewComment String?
  createdAt     DateTime @default(now())
  Product       Product  @relation(fields: [productId], references: [id])
  User          User?    @relation(fields: [userId], references: [id])

  @@index([productId, createdAt])
  @@index([productId])
  @@index([reviewNote])
  @@index([userId])
  @@index([userId, productId])
}

enum Role {
  USER
  ADMIN
  PHARMACIST
}

enum Gender {
  MALE
  FEMALE
}

enum Country {
  EG
  SA
}

enum CartStatus {
  IDLE
  ACTIVE
  ABANDONED
}

enum OrderStatus {
  PENDING
  DONE
  CANCELLED
}

enum DeliveryStatus {
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PickupStatus {
  PENDING
  READY
  COMPLETED
  CANCELLED
}

enum ContactPreference {
  PHONE
  EMAIL
  SMS
  WHATSAPP
}

enum ConflictSolution {
  REPLACE
  REFUND
  CONTACT_CUSTOMER
  PARTIAL_REFUND
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  PHARMACY_PAYMENT
}

enum AmountType {
  PERCENTAGE
  FIXED
}

enum AddressType {
  HOME
  WORK
  PHARMACY
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  REMINDER
}

enum IntervalType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
